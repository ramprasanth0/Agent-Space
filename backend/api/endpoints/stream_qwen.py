from fastapi import APIRouter, Request
from fastapi.responses import StreamingResponse
from ...models.schema import LLMStructuredOutput, ChatRequest
from ...services.agents.open_router import OpenRouterAgent
from ...core import normalize_history, sse
import asyncio

router = APIRouter()

openRouterAgent = OpenRouterAgent()

@router.post("/stream/qwen")
async def stream_qwen(request: Request, payload: ChatRequest):
    history_payload = normalize_history(payload.history)

    async def event_generator():
        seq = 0
        
        try:
            async for partial in openRouterAgent.stream_response(
                message=payload.message,
                model="Qwen",
                history=history_payload
            ):
                if await request.is_disconnected():
                    break
                    
                if "error" in partial:
                    yield sse("error", {"message": partial["error"]}, seq)
                    return
                
                if "answer" in partial:
                    token = partial["answer"]
                    seq += 1
                    yield sse("token", {"answer": token}, seq)
                
                await asyncio.sleep(0)

            if not await request.is_disconnected():
                final_structured = LLMStructuredOutput(
                    answer="",
                    explanation="Generated by Qwen - a coder model focused on step-by-step coding solution",
                    sources=None,
                    facts=None,
                    code=None,
                    language=None,
                    actions=None,
                    nerd_stats=None,
                )
                seq += 1
                yield sse("final", final_structured.model_dump(), seq)
                
            if not await request.is_disconnected():
                seq += 1
                yield sse("done", "[DONE]", seq)

        except Exception as e:
            yield sse("error", {"message": str(e)}, seq)

    return StreamingResponse(
        event_generator(),
        media_type="text/event-stream",
        headers={
            "Cache-Control": "no-cache",
            "X-Accel-Buffering": "no",
            "Connection": "keep-alive",
        }
    )